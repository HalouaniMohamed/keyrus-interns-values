krakend:
    replicaCount: 1

    image:
        registry: docker.io
        repository: devopsfaith/krakend
        tag: "latest"
        pullPolicy: IfNotPresent
    deploymentType: deployment
    strategy: {}

    krakend:
        allInOneImage: false
        env: []
        config: ""
        configFileSource: ""
        partialsDirSource: ""
        settingsDirSource: ""
        templatesDirSource: ""
        partials:
            input_headers.tmpl: |-
                "input_headers": [
                  "Content-Type",
                  "ClientId"
                ]
            rate_limit_backend.tmpl: |-
                "qos/ratelimit/proxy": {
                  "max_rate": 0.5,
                  "capacity": 1
                }
            endpoints.tmpl: |-
                [
                  {
                    "endpoint": "/test",
                    "method": "GET",
                    "backend": [
                        {
                            "method": "GET",
                            "host": [],
                            "url_pattern": "/__debug/roots",
                            "encoding": "json",
                            "deny": [
                                "message"
                            ]
                        }
                    ],
                    "extra_config": {
                        "proxy": {
                            "static": {
                                "data": {
                                    "collection": [
                                        {
                                            "directories": [
                                                "Graceland"
                                            ]
                                        }
                                    ],
                                    "version": "deficient"
                                },
                                "strategy": "always"
                            }
                        }
                    },
                    "output_encoding": "json"
                  }
                ]
        settings:
            service.json: |-
                {
                  "environment": "PRODUCTION",
                  "default_host": "http://localhost:8080",
                  "timeout": "3s",
                  "cache_ttl": "3s",
                  "output_encoding": "json"
                }
        templates: {}
        extraConfig:
            telemetry/opentelemetry:
                service_name: "krakend_prometheus_service"
                metric_reporting_period: 1
                exporters:
                    prometheus:
                        - name: "local_prometheus"
                          port: 9100
                          process_metrics: true
                          go_metrics: true
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""

    serviceAccount:
        create: true
        annotations: {}
        name: ""
    podAnnotations: {}
    deploymentAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    securityContext: 
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        runAsUser: 1000
        readOnlyRootFilesystem: true
        capabilities:
            drop:
                - ALL
            add:
                - NET_BIND_SERVICE
    service:
        externalTrafficPolicy: ""
        type: ClusterIP
        port: 80
        targetPort: 8080
        annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "9100"
            prometheus.io/path: "/metrics"
        metrics:
            enabled: true
            port: 9100
            targetPort: 9100
    ingress:
        enabled: false
        className: ""
        annotations: {}
        hosts:
            - host: chart-example.local
              paths:
                  - path: /
                    pathType: ImplementationSpecific
        tls: []
    lifecycle: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    topologySpreadConstraints: []
    extraVolumeMounts: []
    extraVolumes: []
    livenessProbe:
        httpGet:
            path: /__health
            port: http
    readinessProbe:
        httpGet:
            path: /__health
            port: http
    podDisruptionBudget:
        enabled: false
        minAvailable: 1
        maxUnavailable: ""
        unhealthyPodEvictionPolicy: ""
    serviceMonitor:
        enabled: true
        namespace: "test"
        annotations: {}
        interval: 10s
        scrapeTimeout: 10s
        targetPort: 9100
        selectorLabels:
            app: "krakend"
    networkPolicies:
        enabled: false
        policies:
            - name: "allow-test"
              namespace: "test"
              type: "ingress"
    autoscaling:
        enabled: false
        annotations: {}
        minReplicas: 1
        maxReplicas: 3
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
        behavior: {}
    keda:
        enabled: false
        minReplicas: 1
        maxReplicas: 3
        pollingInterval: 30
        cooldownPeriod: 300
        restoreToOriginalReplicaCount: false
        scaledObject:
            annotations: {}
        triggers: []
        behavior: {}
prometheus:
    rbac:
        create: true

    podSecurityPolicy:
        enabled: false

    imagePullSecrets: []
    serviceAccounts:
        server:
            create: true
            name: ""
            annotations: {}
    commonMetaLabels: {}
    configmapReload:
        reloadUrl: ""
        env: []

        prometheus:
            enabled: true
            name: configmap-reload
            image:
                repository: quay.io/prometheus-operator/prometheus-config-reloader
                tag: v0.74.0
                digest: ""
                pullPolicy: IfNotPresent
            extraArgs: {}
            extraVolumeDirs: []
            extraVolumeMounts: []
            extraConfigmapMounts: []
            containerSecurityContext: {}
            resources: {}

    server:
        name: server
        clusterRoleNameOverride: ""
        releaseNamespace: false
        sidecarContainers: {}
        sidecarTemplateValues: {}
        image:
            repository: quay.io/prometheus/prometheus
            tag: ""
            digest: ""
            pullPolicy: IfNotPresent
        command: []
        priorityClassName: ""
        enableServiceLinks: true
        prefixURL: ""
        baseURL: ""
        env: []
        defaultFlagsOverride: []

        extraFlags:
            - web.enable-lifecycle
        configPath: /etc/config/prometheus.yml
        storagePath: ""

        global:
            scrape_interval: 1m
            scrape_timeout: 10s
            evaluation_interval: 1m
        remoteWrite: []
        remoteRead: []
        tsdb: {}
        exemplars: {}
        probeHeaders: []
        extraArgs: {}
        extraInitContainers: []
        extraVolumeMounts: []
        extraVolumes: []
        extraHostPathMounts: []

        extraConfigmapMounts: []
        extraSecretMounts: []
        configMapOverrideName: ""
        extraConfigmapLabels: {}

        ingress:
            enabled: false
            annotations: {}
            extraLabels: {}
            hosts: []

            path: /
            pathType: Prefix
            extraPaths: []
            tls: []
        strategy:
            type: Recreate
        hostAliases: []
        tolerations: []
        nodeSelector: {}
        affinity: {}
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        topologySpreadConstraints: []
        podDisruptionBudget:
            enabled: false
            maxUnavailable: 1

        persistentVolume:
            enabled: true
            statefulSetNameOverride: ""
            accessModes:
                - ReadWriteOnce
            labels: {}
            annotations: {}
            existingClaim: ""
            mountPath: /data
            size: 8Gi
            subPath: ""

        emptyDir:
            sizeLimit: ""
        podAnnotations: {}
        podLabels: {}
        #alertmanagers: []
        podSecurityPolicy:
            annotations: {}
        replicaCount: 1
        revisionHistoryLimit: 10
        configMapAnnotations: {}
        deploymentAnnotations: {}

        statefulSet:
            enabled: false

            annotations: {}
            labels: {}
            podManagementPolicy: OrderedReady
            headless:
                annotations: {}
                labels: {}
                servicePort: 80
                gRPC:
                    enabled: false
                    servicePort: 10901
            pvcDeleteOnStsDelete: false
            pvcDeleteOnStsScale: false
        tcpSocketProbeEnabled: false
        probeScheme: HTTP
        readinessProbeInitialDelay: 30
        readinessProbePeriodSeconds: 5
        readinessProbeTimeout: 4
        readinessProbeFailureThreshold: 3
        readinessProbeSuccessThreshold: 1
        livenessProbeInitialDelay: 30
        livenessProbePeriodSeconds: 15
        livenessProbeTimeout: 10
        livenessProbeFailureThreshold: 3
        livenessProbeSuccessThreshold: 1
        startupProbe:
            enabled: false
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 10
        resources: {}
        hostNetwork: false
        dnsPolicy: ClusterFirst
        portName: ""
        verticalAutoscaler:
            enabled: false
        dnsConfig: {}
        securityContext:
            runAsUser: 65534
            runAsNonRoot: true
            runAsGroup: 65534
            fsGroup: 65534
        containerSecurityContext: {}

        service:
            enabled: true

            annotations: {}
            labels: {}
            clusterIP: ""
            externalIPs: []

            loadBalancerIP: ""
            loadBalancerSourceRanges: []
            servicePort: 80
            sessionAffinity: None
            type: ClusterIP
            gRPC:
                enabled: false
                servicePort: 10901
            statefulsetReplica:
                enabled: false
                replica: 0
            additionalPorts: []
        terminationGracePeriodSeconds: 300
        retention: "15d"
        retentionSize: ""
    ruleFiles: {}
    scrapeConfigFiles: []
    serverFiles:
        alerting_rules.yml: {}
        alerts: {}
        recording_rules.yml: {}
        rules: {}

        prometheus.yml:
            rule_files:
                - /etc/config/recording_rules.yml
                - /etc/config/alerting_rules.yml
                - /etc/config/rules
                - /etc/config/alerts

            scrape_configs:
                - job_name: prometheus
                  static_configs:
                      - targets:
                            - localhost:9090
                - job_name: "kubernetes-apiservers"

                  kubernetes_sd_configs:
                      - role: endpoints
                  scheme: https
                  tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_namespace,
                                __meta_kubernetes_service_name,
                                __meta_kubernetes_endpoint_port_name,
                            ]
                        action: keep
                        regex: default;kubernetes;https

                - job_name: "kubernetes-nodes"
                  scheme: https
                  tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

                  kubernetes_sd_configs:
                      - role: node

                  relabel_configs:
                      - action: labelmap
                        regex: __meta_kubernetes_node_label_(.+)
                      - target_label: __address__
                        replacement: kubernetes.default.svc:443
                      - source_labels: [__meta_kubernetes_node_name]
                        regex: (.+)
                        target_label: __metrics_path__
                        replacement: /api/v1/nodes/$1/proxy/metrics

                - job_name: "kubernetes-nodes-cadvisor"
                  scheme: https
                  tls_config:
                      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

                  kubernetes_sd_configs:
                      - role: node
                  relabel_configs:
                      - action: labelmap
                        regex: __meta_kubernetes_node_label_(.+)
                      - target_label: __address__
                        replacement: kubernetes.default.svc:443
                      - source_labels: [__meta_kubernetes_node_name]
                        regex: (.+)
                        target_label: __metrics_path__
                        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
                - job_name: "kubernetes-service-endpoints"
                  honor_labels: true

                  kubernetes_sd_configs:
                      - role: endpoints

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_scrape,
                            ]
                        action: keep
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_scrape_slow,
                            ]
                        action: drop
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_scheme,
                            ]
                        action: replace
                        target_label: __scheme__
                        regex: (https?)
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_path,
                            ]
                        action: replace
                        target_label: __metrics_path__
                        regex: (.+)
                      - source_labels:
                            [
                                __address__,
                                __meta_kubernetes_service_annotation_prometheus_io_port,
                            ]
                        action: replace
                        target_label: __address__
                        regex: (.+?)(?::\d+)?;(\d+)
                        replacement: $1:$2
                      - action: labelmap
                        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                        replacement: __param_$1
                      - action: labelmap
                        regex: __meta_kubernetes_service_label_(.+)
                      - source_labels: [__meta_kubernetes_namespace]
                        action: replace
                        target_label: namespace
                      - source_labels: [__meta_kubernetes_service_name]
                        action: replace
                        target_label: service
                      - source_labels: [__meta_kubernetes_pod_node_name]
                        action: replace
                        target_label: node
                - job_name: "kubernetes-service-endpoints-slow"
                  honor_labels: true

                  scrape_interval: 5m
                  scrape_timeout: 30s

                  kubernetes_sd_configs:
                      - role: endpoints

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_scrape_slow,
                            ]
                        action: keep
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_scheme,
                            ]
                        action: replace
                        target_label: __scheme__
                        regex: (https?)
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_path,
                            ]
                        action: replace
                        target_label: __metrics_path__
                        regex: (.+)
                      - source_labels:
                            [
                                __address__,
                                __meta_kubernetes_service_annotation_prometheus_io_port,
                            ]
                        action: replace
                        target_label: __address__
                        regex: (.+?)(?::\d+)?;(\d+)
                        replacement: $1:$2
                      - action: labelmap
                        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                        replacement: __param_$1
                      - action: labelmap
                        regex: __meta_kubernetes_service_label_(.+)
                      - source_labels: [__meta_kubernetes_namespace]
                        action: replace
                        target_label: namespace
                      - source_labels: [__meta_kubernetes_service_name]
                        action: replace
                        target_label: service
                      - source_labels: [__meta_kubernetes_pod_node_name]
                        action: replace
                        target_label: node

                - job_name: "prometheus-pushgateway"
                  honor_labels: true

                  kubernetes_sd_configs:
                      - role: service

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_probe,
                            ]
                        action: keep
                        regex: pushgateway
                - job_name: "kubernetes-services"
                  honor_labels: true

                  metrics_path: /probe
                  params:
                      module: [http_2xx]

                  kubernetes_sd_configs:
                      - role: service

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_service_annotation_prometheus_io_probe,
                            ]
                        action: keep
                        regex: true
                      - source_labels: [__address__]
                        target_label: __param_target
                      - target_label: __address__
                        replacement: blackbox
                      - source_labels: [__param_target]
                        target_label: instance
                      - action: labelmap
                        regex: __meta_kubernetes_service_label_(.+)
                      - source_labels: [__meta_kubernetes_namespace]
                        target_label: namespace
                      - source_labels: [__meta_kubernetes_service_name]
                        target_label: service
                - job_name: "kubernetes-pods"
                  honor_labels: true

                  kubernetes_sd_configs:
                      - role: pod

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_scrape,
                            ]
                        action: keep
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow,
                            ]
                        action: drop
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_scheme,
                            ]
                        action: replace
                        regex: (https?)
                        target_label: __scheme__
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_path,
                            ]
                        action: replace
                        target_label: __metrics_path__
                        regex: (.+)
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_port,
                                __meta_kubernetes_pod_ip,
                            ]
                        action: replace
                        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                        replacement: "[$2]:$1"
                        target_label: __address__
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_port,
                                __meta_kubernetes_pod_ip,
                            ]
                        action: replace
                        regex: (\d+);((([0-9]+?)(\.|$)){4})
                        replacement: $2:$1
                        target_label: __address__
                      - action: labelmap
                        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                        replacement: __param_$1
                      - action: labelmap
                        regex: __meta_kubernetes_pod_label_(.+)
                      - source_labels: [__meta_kubernetes_namespace]
                        action: replace
                        target_label: namespace
                      - source_labels: [__meta_kubernetes_pod_name]
                        action: replace
                        target_label: pod
                      - source_labels: [__meta_kubernetes_pod_phase]
                        regex: Pending|Succeeded|Failed|Completed
                        action: drop
                      - source_labels: [__meta_kubernetes_pod_node_name]
                        action: replace
                        target_label: node
                - job_name: "kubernetes-pods-slow"
                  honor_labels: true

                  scrape_interval: 5m
                  scrape_timeout: 30s

                  kubernetes_sd_configs:
                      - role: pod

                  relabel_configs:
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow,
                            ]
                        action: keep
                        regex: true
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_scheme,
                            ]
                        action: replace
                        regex: (https?)
                        target_label: __scheme__
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_path,
                            ]
                        action: replace
                        target_label: __metrics_path__
                        regex: (.+)
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_port,
                                __meta_kubernetes_pod_ip,
                            ]
                        action: replace
                        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                        replacement: "[$2]:$1"
                        target_label: __address__
                      - source_labels:
                            [
                                __meta_kubernetes_pod_annotation_prometheus_io_port,
                                __meta_kubernetes_pod_ip,
                            ]
                        action: replace
                        regex: (\d+);((([0-9]+?)(\.|$)){4})
                        replacement: $2:$1
                        target_label: __address__
                      - action: labelmap
                        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                        replacement: __param_$1
                      - action: labelmap
                        regex: __meta_kubernetes_pod_label_(.+)
                      - source_labels: [__meta_kubernetes_namespace]
                        action: replace
                        target_label: namespace
                      - source_labels: [__meta_kubernetes_pod_name]
                        action: replace
                        target_label: pod
                      - source_labels: [__meta_kubernetes_pod_phase]
                        regex: Pending|Succeeded|Failed|Completed
                        action: drop
                      - source_labels: [__meta_kubernetes_pod_node_name]
                        action: replace
                        target_label: node
    extraScrapeConfigs: |
        - job_name: 'krakend'
          metrics_path: /metrics
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                  - test
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace]
              action: keep
              regex: test
            - source_labels: [__meta_kubernetes_service_name]
              action: keep
              regex: krakend-stack
            - source_labels: [__meta_kubernetes_endpoint_port_name]
              action: keep
              regex: metrics  # Ensure this matches the port name defined in the service
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace
            - source_labels: [__meta_kubernetes_service_name]
              action: replace
              target_label: service
            - source_labels: [__meta_kubernetes_pod_container_name]
              action: replace
              target_label: container
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_instance]
              action: replace
              target_label: instance
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
              action: replace
              target_label: job
    alertRelabelConfigs: {}
    networkPolicy:
        enabled: false
    forceNamespace: ""
    extraManifests: []
    alertmanager:
        enabled: true

        

        podSecurityContext:
            runAsUser: 65534
            runAsNonRoot: true
            runAsGroup: 65534
            fsGroup: 65534
                # yaml-language-server: $schema=values.schema.json
        # Default values for alertmanager.
        # This is a YAML-formatted file.
        # Declare variables to be passed into your templates.

        replicaCount: 1

        # Number of old history to retain to allow rollback
        # Default Kubernetes value is set to 10
        revisionHistoryLimit: 10

        image:
            repository: quay.io/prometheus/alertmanager
            pullPolicy: IfNotPresent
            # Overrides the image tag whose default is the chart appVersion.
            tag: ""

        # Full external URL where alertmanager is reachable, used for backlinks.
        baseURL: ""

        extraArgs: {}

        ## Additional Alertmanager Secret mounts
        # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
        extraSecretMounts:
            []
            # - name: secret-files
            #   mountPath: /etc/secrets
            #   subPath: ""
            #   secretName: alertmanager-secret-files
            #   readOnly: true

        imagePullSecrets: []
        nameOverride: ""
        fullnameOverride: ""
        ## namespaceOverride overrides the namespace which the resources will be deployed in
        namespaceOverride: ""

        automountServiceAccountToken: true

        serviceAccount:
            # Specifies whether a service account should be created
            create: true
            # Annotations to add to the service account
            annotations: {}
            # The name of the service account to use.
            # If not set and create is true, a name is generated using the fullname template
            name: ""

        # Sets priorityClassName in alertmanager pod
        priorityClassName: ""

        # Sets schedulerName in alertmanager pod
        schedulerName: ""

        
        
        dnsConfig:
            {}
            # nameservers:
            #   - 1.2.3.4
            # searches:
            #   - ns1.svc.cluster-domain.example
            #   - my.dns.search.suffix
            # options:
            #   - name: ndots
            #     value: "2"
            #   - name: edns0
        hostAliases:
            []
            # - ip: "127.0.0.1"
            #   hostnames:
            #   - "foo.local"
            #   - "bar.local"
            # - ip: "10.1.2.3"
            #   hostnames:
            #   - "foo.remote"
            #   - "bar.remote"
        securityContext:
            # capabilities:
            #   drop:
            #   - ALL
            # readOnlyRootFilesystem: true
            runAsUser: 65534
            runAsNonRoot: true
            runAsGroup: 65534

        additionalPeers: []

        ## Additional InitContainers to initialize the pod
        ##
        extraInitContainers: []

        ## Additional containers to add to the stateful set. This will allow to setup sidecarContainers like a proxy to integrate
        ## alertmanager with an external tool like teams that has not direct integration.
        ##
        extraContainers: []

        livenessProbe:
            httpGet:
                path: /
                port: http

        readinessProbe:
            httpGet:
                path: /
                port: http

        service:
            annotations: {}
            labels: {}
            type: ClusterIP
            port: 9093
            clusterPort: 9094
            loadBalancerIP: "" # Assign ext IP when Service type is LoadBalancer
            loadBalancerSourceRanges: [] # Only allow access to loadBalancerIP from these IPs
            # if you want to force a specific nodePort. Must be use with service.type=NodePort
            # nodePort:

            # Optionally specify extra list of additional ports exposed on both services
            extraPorts: []

            # ip dual stack
            ipDualStack:
                enabled: false
                ipFamilies: ["IPv6", "IPv4"]
                ipFamilyPolicy: "PreferDualStack"

        # Configuration for creating a separate Service for each statefulset Alertmanager replica
        #
        servicePerReplica:
            enabled: false
            annotations: {}

            # Loadbalancer source IP ranges
            # Only used if servicePerReplica.type is "LoadBalancer"
            loadBalancerSourceRanges: []

            # Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
            #
            externalTrafficPolicy: Cluster

            # Service type
            #
            type: ClusterIP

        ingress:
            enabled: false
            className: ""
            annotations:
                {}
                # kubernetes.io/ingress.class: nginx
                # kubernetes.io/tls-acme: "true"
            hosts:
                - host: alertmanager.domain.com
                  paths:
                    - path: /
                      pathType: ImplementationSpecific
            tls: []
            #  - secretName: chart-example-tls
            #    hosts:
            #      - alertmanager.domain.com

        # Configuration for creating an Ingress that will map to each Alertmanager replica service
        # alertmanager.servicePerReplica must be enabled
        #
        ingressPerReplica:
            enabled: false

            # className for the ingresses
            #
            className: ""

            annotations: {}
            labels: {}

            # Final form of the hostname for each per replica ingress is
            # {{ ingressPerReplica.hostPrefix }}-{{ $replicaNumber }}.{{ ingressPerReplica.hostDomain }}
            #
            # Prefix for the per replica ingress that will have `-$replicaNumber`
            # appended to the end
            hostPrefix: "alertmanager"
            # Domain that will be used for the per replica ingress
            hostDomain: "domain.com"

            # Paths to use for ingress rules
            #
            paths:
                - /

            # PathType for ingress rules
            #
            pathType: ImplementationSpecific

            # Secret name containing the TLS certificate for alertmanager per replica ingress
            # Secret must be manually created in the namespace
            tlsSecretName: ""

            # Separated secret for each per replica Ingress. Can be used together with cert-manager
            #
            tlsSecretPerReplica:
                enabled: false
                # Final form of the secret for each per replica ingress is
                # {{ tlsSecretPerReplica.prefix }}-{{ $replicaNumber }}
                #
                prefix: "alertmanager"

        resources:
            {}
            # We usually recommend not to specify default resources and to leave this as a conscious
            # choice for the user. This also increases chances charts run on environments with little
            # resources, such as Minikube. If you do want to specify resources, uncomment the following
            # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
            # limits:
            #   cpu: 100m
            #   memory: 128Mi
            # requests:
            #   cpu: 10m
            #   memory: 32Mi

        nodeSelector: {}

        tolerations: []

        affinity: {}

        ## Pod anti-affinity can prevent the scheduler from placing Alertmanager replicas on the same node.
        ## The default value "soft" means that the scheduler should *prefer* to not schedule two replica pods onto the same node but no guarantee is provided.
        ## The value "hard" means that the scheduler is *required* to not schedule two replica pods onto the same node.
        ## The value "" will disable pod anti-affinity so that no anti-affinity rules will be configured.
        ##
        podAntiAffinity: ""

        ## If anti-affinity is enabled sets the topologyKey to use for anti-affinity.
        ## This can be changed to, for example, failure-domain.beta.kubernetes.io/zone
        ##
        podAntiAffinityTopologyKey: kubernetes.io/hostname

        ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
        ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
        topologySpreadConstraints:
            []
            # - maxSkew: 1
            #   topologyKey: failure-domain.beta.kubernetes.io/zone
            #   whenUnsatisfiable: DoNotSchedule
            #   labelSelector:
            #     matchLabels:
            #       app.kubernetes.io/instance: alertmanager

        statefulSet:
            annotations: {}

        ## Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to
        ## be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
        ## This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds
        ## feature gate.
        ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#minimum-ready-seconds
        minReadySeconds: 0

        podAnnotations: {}
        podLabels: {}

        # Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
        podDisruptionBudget:
            {}
            # maxUnavailable: 1
            # minAvailable: 1

        command: []

        persistence:
            enabled: true
            ## Persistent Volume Storage Class
            ## If defined, storageClassName: <storageClass>
            ## If set to "-", storageClassName: "", which disables dynamic provisioning
            ## If undefined (the default) or set to null, no storageClassName spec is
            ## set, choosing the default provisioner.
            ##
            # storageClass: "-"
            accessModes:
                - ReadWriteOnce
            size: 50Mi

        configAnnotations:
            {}
            ## For example if you want to provide private data from a secret vault
            ## https://github.com/banzaicloud/bank-vaults/tree/main/charts/vault-secrets-webhook
            ## P.s.: Add option `configMapMutation: true` for vault-secrets-webhook
            # vault.security.banzaicloud.io/vault-role: "admin"
            # vault.security.banzaicloud.io/vault-addr: "https://vault.vault.svc.cluster.local:8200"
            # vault.security.banzaicloud.io/vault-skip-verify: "true"
            # vault.security.banzaicloud.io/vault-path: "kubernetes"
            ## Example for inject secret
            # slack_api_url: '${vault:secret/data/slack-hook-alerts#URL}'

        config:
            enabled: true
            global:
                {}
                # slack_api_url: ''

            templates:
                - "/etc/alertmanager/*.tmpl"

            receivers:
                - name: default-receiver
                # slack_configs:
                #  - channel: '@you'
                #    send_resolved: true

            route:
                group_wait: 10s
                group_interval: 5m
                receiver: default-receiver
                repeat_interval: 3h

        ## Monitors ConfigMap changes and POSTs to a URL
        ## Ref: https://github.com/prometheus-operator/prometheus-operator/tree/main/cmd/prometheus-config-reloader
        ##
        configmapReload:
            ## If false, the configmap-reload container will not be deployed
            ##
            enabled: false

            ## configmap-reload container name
            ##
            name: configmap-reload

            ## configmap-reload container image
            ##
            image:
                repository: quay.io/prometheus-operator/prometheus-config-reloader
                tag: v0.66.0
                pullPolicy: IfNotPresent

            # containerPort: 9533

            ## configmap-reload resource requests and limits
            ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
            ##
            resources: {}

            extraArgs: {}

            ## Optionally specify extra list of additional volumeMounts
            extraVolumeMounts:
                []
                # - name: extras
                #   mountPath: /usr/share/extras
                #   readOnly: true

            ## Optionally specify extra environment variables to add to alertmanager container
            extraEnv:
                []
                # - name: FOO
                #   value: BAR

            securityContext:
                {}
                # capabilities:
                #   drop:
                #   - ALL
                # readOnlyRootFilesystem: true
                # runAsUser: 65534
                # runAsNonRoot: true
                # runAsGroup: 65534

        templates: {}
        #   alertmanager.tmpl: |-

        ## Optionally specify extra list of additional volumeMounts
        extraVolumeMounts:
            []
            # - name: extras
            #   mountPath: /usr/share/extras
            #   readOnly: true

        ## Optionally specify extra list of additional volumes
        extraVolumes:
            []
            # - name: extras
            #   emptyDir: {}

        ## Optionally specify extra environment variables to add to alertmanager container
        extraEnv:
            []
            # - name: FOO
            #   value: BAR

        testFramework:
            enabled: false
            annotations:
                "helm.sh/hook": test-success
                # "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"

    kube-state-metrics:
        enabled: true
    prometheus-node-exporter:
        enabled: true

        rbac:
            pspEnabled: false

        containerSecurityContext:
            allowPrivilegeEscalation: false
    prometheus-pushgateway:
        enabled: true
        serviceAnnotations:
            prometheus.io/probe: pushgateway
grafana:
    global:
        imageRegistry: null
        imagePullSecrets: []

    rbac:
        create: true
        pspEnabled: false
        pspUseAppArmor: false
        namespaced: false
        extraRoleRules: []
        extraClusterRoleRules: []
    serviceAccount:
        create: true
        name:
        nameTest:
        labels: {}
        automountServiceAccountToken: false

    replicas: 1
    headlessService: false
    automountServiceAccountToken: true
    autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 5
        targetCPU: "60"
        targetMemory: ""
        behavior: {}
    podDisruptionBudget: {}
    deploymentStrategy:
        type: RollingUpdate

    readinessProbe:
        httpGet:
            path: /api/health
            port: 3000

    livenessProbe:
        httpGet:
            path: /api/health
            port: 3000
        initialDelaySeconds: 60
        timeoutSeconds: 30
        failureThreshold: 10

    image:
        registry: docker.io
        repository: grafana/grafana
        tag: ""
        sha: ""
        pullPolicy: IfNotPresent
        pullSecrets: []

    testFramework:
        enabled: true
        image:
            registry: docker.io
            repository: bats/bats
            tag: "v1.4.1"
        imagePullPolicy: IfNotPresent
        securityContext: {}
        resources: {}
    dnsPolicy: ~
    dnsConfig: {}

    securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472

    containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
            drop:
                - ALL
        seccompProfile:
            type: RuntimeDefault
    createConfigmap: true
    extraConfigmapMounts: []

    extraEmptyDirMounts: []
    extraLabels: {}

    downloadDashboardsImage:
        registry: docker.io
        repository: curlimages/curl
        tag: 7.85.0
        sha: ""
        pullPolicy: IfNotPresent

    downloadDashboards:
        env: {}
        envFromSecret: ""
        resources: {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                    - ALL
            seccompProfile:
                type: RuntimeDefault
        envValueFrom: {}

    podPortName: grafana
    gossipPortName: gossip
    service:
        enabled: true
        type: ClusterIP
        loadBalancerIP: ""
        loadBalancerClass: ""
        loadBalancerSourceRanges: []
        port: 80
        targetPort: 3000
        annotations: {}
        labels: {}
        portName: service
        appProtocol: ""

    serviceMonitor:
        enabled: true
        path: /metrics
        labels: {}
        interval: 30s
        scheme: http
        tlsConfig: {}
        scrapeTimeout: 30s
        relabelings: []
        metricRelabelings: []
        targetLabels: []

    extraExposePorts: []
    hostAliases: []

    ingress:
        enabled: false
        annotations: {}
        labels: {}
        path: /
        pathType: Prefix

        hosts:
            - chart-example.local
        extraPaths: []

        tls: []

    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    topologySpreadConstraints: []
    extraInitContainers: []
    extraContainers: ""
    extraContainerVolumes: []
    persistence:
        type: pvc
        enabled: false
        accessModes:
            - ReadWriteOnce
        size: 10Gi
        finalizers:
            - kubernetes.io/pvc-protection
        extraPvcLabels: {}
        inMemory:
            enabled: false

    initChownData:
        enabled: true
        image:
            registry: docker.io
            repository: library/busybox
            tag: "1.31.1"
            sha: ""
            pullPolicy: IfNotPresent
        resources: {}
        securityContext:
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
                type: RuntimeDefault
            capabilities:
                add:
                    - CHOWN
    adminUser: admin
    admin:
        existingSecret: ""
        userKey: admin-user
        passwordKey: admin-password

    env: {}
    envValueFrom: {}
    envFromSecret: ""
    envRenderSecret: {}
    envFromSecrets: []
    envFromConfigMaps: []
    enableServiceLinks: true
    extraSecretMounts: []
    extraVolumeMounts: []
    extraVolumes: []
    lifecycleHooks: {}
    plugins: []
    datasources: {}
    alerting: {}
    notifiers: {}
    dashboardProviders: {}
    dashboards: {}
    dashboardsConfigMaps: {}
    grafana.ini:
        paths:
            data: /var/lib/grafana/
            logs: /var/log/grafana
            plugins: /var/lib/grafana/plugins
            provisioning: /etc/grafana/provisioning
        analytics:
            check_for_updates: true
        log:
            mode: console
        grafana_net:
            url: https://grafana.net
        server:
            domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
    ldap:
        enabled: false
        existingSecret: ""
        config: ""
    smtp:
        existingSecret: ""
        userKey: "user"
        passwordKey: "password"
    sidecar:
        image:
            registry: quay.io
            repository: kiwigrid/k8s-sidecar
            tag: 1.26.1
            sha: ""
        imagePullPolicy: IfNotPresent
        resources: {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                    - ALL
            seccompProfile:
                type: RuntimeDefault
        enableUniqueFilenames: false
        readinessProbe: {}
        livenessProbe: {}
        alerts:
            enabled: false
            env: {}
            label: grafana_alert
            labelValue: ""
            searchNamespace: null
            watchMethod: WATCH
            resource: both
            reloadURL: "http://localhost:3000/api/admin/provisioning/alerting/reload"
            script: null
            skipReload: false
            initAlerts: false
            extraMounts: []
            sizeLimit: {}
        dashboards:
            enabled: false
            env: {}
            SCProvider: true
            label: grafana_dashboard
            labelValue: ""
            folder: /tmp/dashboards
            defaultFolderName: null
            searchNamespace: null
            watchMethod: WATCH
            resource: both
            folderAnnotation: null
            reloadURL: "http://localhost:3000/api/admin/provisioning/dashboards/reload"
            script: null
            skipReload: false
            provider:
                name: sidecarProvider
                orgid: 1
                folder: ""
                folderUid: ""
                type: file
                disableDelete: false
                allowUiUpdates: false
                foldersFromFilesStructure: false
            extraMounts: []
            sizeLimit: {}
        datasources:
            enabled: false
            env: {}
            envValueFrom: {}
            label: grafana_datasource
            labelValue: ""
            searchNamespace: null
            watchMethod: WATCH
            resource: both
            reloadURL: "http://localhost:3000/api/admin/provisioning/datasources/reload"
            script: null
            skipReload: false
            initDatasources: false
            sizeLimit: {}
        plugins:
            enabled: false
            env: {}
            label: grafana_plugin
            labelValue: ""
            searchNamespace: null
            watchMethod: WATCH
            resource: both
            reloadURL: "http://localhost:3000/api/admin/provisioning/plugins/reload"
            script: null
            skipReload: false
            initPlugins: false
            sizeLimit: {}
        notifiers:
            enabled: false
            env: {}
            label: grafana_notifier
            labelValue: ""
            searchNamespace: null
            watchMethod: WATCH
            resource: both
            reloadURL: "http://localhost:3000/api/admin/provisioning/notifications/reload"
            script: null
            skipReload: false
            initNotifiers: false
            sizeLimit: {}
    namespaceOverride: ""
    revisionHistoryLimit: 10
    imageRenderer:
        deploymentStrategy: {}
        enabled: false
        replicas: 1
        autoscaling:
            enabled: false
            minReplicas: 1
            maxReplicas: 5
            targetCPU: "60"
            targetMemory: ""
            behavior: {}
        image:
            registry: docker.io
            repository: grafana/grafana-image-renderer
            tag: latest
            sha: ""
            pullPolicy: Always
        env:
            HTTP_HOST: "0.0.0.0"
        envValueFrom: {}
        serviceAccountName: ""
        securityContext: {}
        containerSecurityContext:
            seccompProfile:
                type: RuntimeDefault
            capabilities:
                drop: ["ALL"]
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
        podAnnotations: {}
        hostAliases: []
        priorityClassName: ""
        service:
            enabled: true
            portName: "http"
            port: 8081
            targetPort: 8081
            appProtocol: ""
        serviceMonitor:
            enabled: false
            path: /metrics
            labels: {}
            interval: 1m
            scheme: http
            tlsConfig: {}
            scrapeTimeout: 30s
            relabelings: []
            targetLabels: []
        grafanaProtocol: http
        grafanaSubPath: ""
        podPortName: http
        revisionHistoryLimit: 10
        networkPolicy:
            limitIngress: true
            limitEgress: false
            extraIngressSelectors: []
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}

    networkPolicy:
        enabled: false
        ingress: true
        allowExternal: true
        explicitNamespacesSelector: {}
        egress:
            enabled: false
            blockDNSResolution: false
            ports: []
            to: []
    enableKubeBackwardCompatibility: false
    useStatefulSet: false
    extraObjects: []
    assertNoLeakedSecrets: true

